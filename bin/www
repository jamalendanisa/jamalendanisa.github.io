#!/usr/bin/env node

// Module dependencies.
const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const scrape = require("../controllers/scrape.controller.js");
const cron = require('node-cron');

// Normalize a port into a number, string, or false.
normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);

// Event listener for HTTP server "error" event.
onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

server.on('error', onError);
server.on('listening', function () {
  onListening

  // This function below is for call scrape data function right after app start
  // And calling it every 30 minutes
  // I'll write this just in case for adding posibility, will comment it for now
  // You could call the function when go to /scrapedata

  // call scraping data function to work
 // scrape.data();
 // console.log('start scraping data')
 // cron.schedule('*/30 * * * *', () => {
 //   console.log('running scrape data task every 30 minutes');
  // scrape.data();
 // });
});